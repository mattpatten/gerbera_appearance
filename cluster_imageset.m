function cluster_imageset(imgAbbr, numClusters, componentThreshold)

% This loads up the image properties matrix generated by get_image_properties.m and performs a principal
% component analysis to reduce dimensionality (and is required prior to clustering due to the 'curse of
% dimensionality'), and then runs k-means clustering to group the images into related sets, putting the 
% images from each cluster into individual folders.
%
% Inputs:
%       imgAbbr            - String; an abbrevation identifying the dataset of flowers to process.
%       numClusters        - [1-Inf) How many groups we want the data to be split into.
%       componentThreshold - [0-100] When the cumulative sum of variance in the PCA explained reaches 
%                            this value, accept the number of components. 100 = all components.
% Outputs:
%       Image files will copy into a set of subfolders within the output directory, one folder per defined 
%       cluster. If clustering is successful, images within folder should be reasonably similar in appearance.
%
% Created by Matt Patten
% Created on 4th July, 2019 (happy independence America!)


%Set default parameters
if nargin < 2, numClusters = 70; end
if nargin < 3, componentThreshold = 99; end 

numValsToDisplay = 30; %how many t-squared values we want to print on screen (doesn't affect analysis, only user display)

%get/create directories
[dataDir, imgDir, outputDir] = get_dir(imgAbbr,'data','img','output');

clusterDir = sprintf('%sstimulus_clusters_%igroups_%02gthr_%s%s', outputDir, numClusters, componentThreshold, datestr(now,'yyyymmdd_HHMMSS'), filesep); %folder name
if ~exist(clusterDir,'dir'), mkdir(clusterDir); end %generate folder

%load image properties table (dataset quantifying image features of each image)
load([dataDir 'properties_table_' imgAbbr '.mat'],'header','imgProperties','labels');

%convert to z-score (mean=0, std=1) for each feature (column)
zImgProperties = zscore(imgProperties);

%Run principal component analysis
%Useful reference: https://courses.engr.illinois.edu/bioe298b/sp2018/Lecture%20Examples/23%20PCA%20slides.pdf
[coeff, score, latent, tsquared, explained] = pca(zImgProperties);

%decide how many components to keep
cumExplained = cumsum(explained);
numComponents = find(cumExplained>componentThreshold,1,'first');

%use values in PCA dimensions to limit dataset to the most important components (in terms of variance explained)
data = score(:,1:numComponents);


%% display variance explained
fprintf('\n=============================================================================\n');
disp('Cumulative explained variance:');
disp(cumExplained');
fprintf('\nUsing %i of %i components, explaining %.2f%% of the variance.\n',numComponents,size(zImgProperties,2),cumExplained(numComponents));

f = figure;
subplot(1,3,1);
plot(0:size(zImgProperties,2),[0 cumsum(explained)']); 
xlim([0 size(zImgProperties,2)]); 
ylim([0 100]);
xlabel('Number of factors');
ylabel('Variance Explained (%)');
title('PCA: Variance Explained');
box off;


%% find 'outlier' flowers (ones that don't fit easily into these principal components)
[sorted_tsquared, sorted_tsq_idx] = sort(tsquared,'descend');

%pcaOutlierThreshold = 100;
%tsq_outlier_image_names = labels(find(tsquared>pcaOutlierThreshold)); %find flower labels that are above a certain threshold

%display information
fprintf('\n=============================================================================\n');
disp('Highest T-squared values (most distance from centre of all principal components / origin of PCA-space), i.e., outliers after dimensionality reduction: ');
disp(sorted_tsquared(1:numValsToDisplay)');
disp('These flower image names: ');
disp(labels(sorted_tsq_idx(1:numValsToDisplay)));

subplot(1,3,2);
plot(sort(tsquared,'descend')); %see decrease in size to decide threshold
xlabel('Flower (sorted)');
ylabel('Distance to PCA-origin');
title('PCA: T-squared');
box off;


%% Perform k-means clustering to categorize dataset based on our image properties
[cluster_labels, centroids, ~, cent_dist] = kmeans(data,numClusters);

%find outliers (images that have largest distances to nearest cluster)
dist2nearestCluster = min(cent_dist,[],2);
[sorted_cl_outliers, sorted_cl_idx] = sort(dist2nearestCluster,'descend');

%clOutlierThreshold = 15;
%cl_outlier_image_names = labels(find(dist2nearestCluster>clOutlierThreshold));

%display information
fprintf('\n=============================================================================\n');
disp('Highest distance to cluster centroids, i.e., outliers: ');
disp(sorted_cl_outliers(1:numValsToDisplay)');
disp('These flower image names: ');
disp(labels(sorted_cl_idx(1:numValsToDisplay)));

subplot(1,3,3);
plot(sort(sorted_cl_outliers,'descend')); %see decrease in size to decide threshold
xlabel('Flower (sorted)');
ylabel('Distance to nearest cluster');
title('K-means: Euclidean distance');
box off;

%save graphs
set(gcf, 'Position', [1, 1, 1000, 400]);
saveas(f,[clusterDir 'PCA_and_clustering_details.png']);
close;


%% Copy images
for i=1:numClusters
    
    %make cluster folder
    destinationDir = sprintf('%scluster%03g%s',clusterDir,i,filesep); 
    mkdir(destinationDir); %output directory for this analysis

    %get labels for images in this cluster
    imgNames = labels(cluster_labels==i);
    
    %copy image files to directory for this cluster
    for nn=1:length(imgNames)
        imgSource = [imgDir imgNames{nn} '.png'];               %image source folder and filename
        imgDestination = [destinationDir imgNames{nn} '.png'];  %image destination folder and filename
        copyfile(imgSource,imgDestination,'f');                 %copy the image to new destination
    end
end

end